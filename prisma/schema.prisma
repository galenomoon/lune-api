// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============ User ============

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// ============ Student ============

model Student {
  id                String             @id @default(cuid())
  firstName         String
  lastName          String
  birthDate         DateTime
  cpf               String             @unique
  rg                String             @unique
  phone             String?
  instagram         String?
  email             String?
  password          String
  addresses         Address[]
  emergencyContacts EmergencyContact[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  medicalRecord     MedicalRecord[]
  enrollments       Enrollment[]

  @@map("students")
}

model Enrollment {
  id         String   @id @default(cuid())
  startDate  DateTime
  endDate    DateTime
  status     String
  studentId  String
  student    Student  @relation(fields: [studentId], references: [id])
  planId     String
  plan       Plan     @relation(fields: [planId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  paymentDay Int
  class      Class?   @relation(fields: [classId], references: [id])
  classId    String?

  @@map("enrollments")
}

model MedicalRecord {
  id             String   @id @default(cuid())
  bloodType      String
  healthProblems String   @default("")
  allergies      String   @default("")
  medications    String   @default("")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  studentId      String
  student        Student  @relation(fields: [studentId], references: [id])

  @@map("medical_records")
}

model Address {
  id           String   @id @default(cuid())
  street       String
  number       String
  city         String
  neighborhood String
  state        String
  complement   String?
  cep          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  studentId    String
  student      Student  @relation(fields: [studentId], references: [id])

  @@map("addresses")
}

model EmergencyContact {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])

  @@unique([studentId, phone])
  @@map("emergency_contacts")
}

model Plan {
  id          String       @id @default(cuid())
  name        String
  weeklyHours Int
  description String?
  recurrence  String
  price       Float
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  enrollments Enrollment[]

  @@map("plans")
}

//  ============ CRM ✅ ============

model Lead {
  id                 String   @id @default(cuid())
  firstName          String
  lastName           String?
  phone              String?
  findUsBy           String?
  obs                String?
  modalityOfInterest String
  preferencePeriod   String?
  age                Int?
  city               String?
  instagram          String?
  email              String?
  score              Int // 0 - 5
  status             Int      @default(0) // 0 - New, 1 - Contacted, 2 - Enrolled
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("leads")
}

// ============ Teacher ✅ ============

model Teacher {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  birthDate DateTime
  cpf       String   @unique
  rg        String   @unique
  phone     String?
  email     String?
  instagram String?
  priceHour Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes   Class[]

  @@map("teachers")
}

// ============ GRID CLASSES ============

model GridItem {
  id        String   @id @default(cuid())
  dayOfWeek String
  startTime String
  endTime   String
  classId   String
  class     Class    @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("grid_classes")
}

// ============ CLASS ============

model Class {
  id           String       @id @default(cuid())
  name         String
  description  String?
  modalityId   String
  modality     Modality     @relation(fields: [modalityId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  teacher      Teacher[]
  enrollments  Enrollment[]
  classLevelId String
  maxStudents  Int
  classLevel   ClassLevel   @relation(fields: [classLevelId], references: [id])
  gridClasses  GridItem[]

  @@map("classes")
}

model Modality {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes   Class[]

  @@map("modalities")
}

model ClassLevel {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes   Class[]

  @@map("class_levels")
}

// SOON...

// ===================== LOGS =====================

// ===================== FREQUENCY =====================
