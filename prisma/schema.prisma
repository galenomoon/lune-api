// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============ User ✅ ============

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// ============ Student ============

model Student {
  id                String             @id @default(cuid())
  firstName         String
  lastName          String
  birthDate         DateTime
  cpf               String             @unique
  rg                String             @unique
  phone             String?
  instagram         String?
  email             String?
  obs               String?
  password          String
  addresses         Address[]
  emergencyContacts EmergencyContact[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  medicalRecord     MedicalRecord[]
  enrollments       Enrollment[]

  @@map("students")
}

model Enrollment {
  id                String             @id @default(cuid())
  startDate         DateTime
  endDate           DateTime
  status            String // 'active', 'canceled', 'pending', 'archived'
  studentId         String
  student           Student            @relation(fields: [studentId], references: [id], onDelete: Cascade)
  planId            String
  plan              Plan               @relation(fields: [planId], references: [id])
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  paymentDay        Int
  class             Class?             @relation(fields: [classId], references: [id])
  classId           String?
  payments          Payment[]
  signature         String?
  contractSignToken ContractSignToken?

  @@map("enrollments")
}

model ContractSignToken {
  id           String     @id @default(uuid())
  enrollmentId String     @unique
  token        String     @unique
  validUntil   DateTime
  usedAt       DateTime? // Nulo até o token ser usado
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
}

model Payment {
  id           String        @id @default(cuid())
  enrollmentId String
  enrollment   Enrollment    @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  amount       Float
  dueDate      DateTime // Data em que o pagamento deveria ser feito
  status       PaymentStatus
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("payments")
}

enum PaymentStatus {
  PENDING // Pagamento pendente
  PAID // Pagamento concluído
  CANCELED // Pagamento cancelado
}

model MedicalRecord {
  id             String   @id @default(cuid())
  bloodType      String
  healthProblems String   @default("")
  allergies      String   @default("")
  medications    String   @default("")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  studentId      String
  student        Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("medical_records")
}

model Address {
  id           String   @id @default(cuid())
  street       String
  number       String
  city         String
  neighborhood String
  state        String
  complement   String?
  cep          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  studentId    String
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model EmergencyContact {
  id          String   @id @default(cuid())
  name        String
  description String?
  phone       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  studentId   String
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, phone])
  @@map("emergency_contacts")
}

model Plan {
  id             String       @id @default(cuid())
  name           String
  weeklyClasses  Int?
  description    String?
  durationInDays Int?
  isSecondary    Boolean?
  price          Float
  status         Boolean      @default(true) // true = ativo, false = inativo
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  enrollments    Enrollment[]

  @@map("plans")
}

//  ============ CRM ============

model Lead {
  id                 String   @id @default(cuid())
  firstName          String
  lastName           String?
  phone              String?
  findUsBy           String?
  obs                String?
  modalityOfInterest String
  preferencePeriod   String?
  age                Int?
  city               String?
  instagram          String?
  email              String?
  score              Int
  status             Int      @default(0) // 0 - New, 1 - Contacted, 2 - Enrolled
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("leads")
}

model TrialInvite {
  id         String      @id @default(uuid())
  token      String      @unique
  usedAt     DateTime?
  gridItemId String
  gridItem   GridItem    @relation(fields: [gridItemId], references: [id])
  validUntil DateTime
  trialClass TrialClass?
  createdAt  DateTime    @default(now())

  @@map("trial_invites")
}

model TrialClass {
  id         String       @id @default(cuid())
  name       String
  phone      String
  modality   String
  gridItemId String
  gridItem   GridItem     @relation(fields: [gridItemId], references: [id])
  date       DateTime
  inviteId   String?      @unique
  invite     TrialInvite? @relation(fields: [inviteId], references: [id])
  createdAt  DateTime     @default(now())

  @@map("trial_classes")
}

// ============ Teacher ============

model Teacher {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  birthDate DateTime
  cpf       String   @unique
  rg        String   @unique
  phone     String?
  email     String?
  instagram String?
  priceHour Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes   Class[]
  password  String?

  @@map("teachers")
}

// ============ GRID CLASSES ============

model GridItem {
  id           String        @id @default(cuid())
  dayOfWeek    String
  startTime    String
  endTime      String
  classId      String?
  class        Class?        @relation(fields: [classId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  trialClasses TrialClass[]
  TrialInvite  TrialInvite[]

  @@map("grid_items")
}

// ============ CLASS ============
//OK
model Class {
  id           String       @id @default(cuid())
  name         String
  description  String?
  modalityId   String
  modality     Modality     @relation(fields: [modalityId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  teacher      Teacher?     @relation(fields: [teacherId], references: [id])
  enrollments  Enrollment[]
  classLevelId String
  maxStudents  Int
  classLevel   ClassLevel   @relation(fields: [classLevelId], references: [id])
  gridClasses  GridItem[]
  teacherId    String?

  @@map("classes")
}

//OK
model Modality {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes   Class[]

  @@map("modalities")
}

//OK
model ClassLevel {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes   Class[]

  @@map("class_levels")
}
