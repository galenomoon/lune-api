generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Student {
  id                String             @id @default(cuid())
  firstName         String
  lastName          String
  birthDate         DateTime
  cpf               String             @unique
  rg                String             @unique
  phone             String?
  instagram         String?
  email             String?
  password          String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  obs               String?
  addresses         Address[]
  emergencyContacts EmergencyContact[]
  enrollments       Enrollment[]
  medicalRecord     MedicalRecord[]

  @@map("students")
}

model Enrollment {
  id                String             @id @default(cuid())
  startDate         DateTime
  endDate           DateTime
  status            String
  studentId         String
  planId            String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  paymentDay        Int
  classId           String?
  signature         String?
  contractSignToken ContractSignToken?
  class             Class?             @relation(fields: [classId], references: [id])
  plan              Plan               @relation(fields: [planId], references: [id])
  student           Student            @relation(fields: [studentId], references: [id], onDelete: Cascade)
  payments          Payment[]

  @@map("enrollments")
}

model ContractSignToken {
  id           String     @id @default(uuid())
  enrollmentId String     @unique
  token        String     @unique
  validUntil   DateTime
  usedAt       DateTime?
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
}

model Payment {
  id           String        @id @default(cuid())
  enrollmentId String
  amount       Float
  dueDate      DateTime
  status       PaymentStatus
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  enrollment   Enrollment    @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model MedicalRecord {
  id             String   @id @default(cuid())
  bloodType      String
  healthProblems String   @default("")
  allergies      String   @default("")
  medications    String   @default("")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  studentId      String
  student        Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("medical_records")
}

model Address {
  id           String   @id @default(cuid())
  street       String
  number       String
  city         String
  neighborhood String
  state        String
  complement   String?
  cep          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  studentId    String
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model EmergencyContact {
  id          String   @id @default(cuid())
  phone       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  studentId   String
  description String?
  name        String
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, phone])
  @@map("emergency_contacts")
}

model Plan {
  id             String       @id @default(cuid())
  name           String
  description    String?
  price          Float
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  weeklyClasses  Int?
  durationInDays Int?
  status         Boolean      @default(true)
  isSecondary    Boolean?
  enrollments    Enrollment[]

  @@map("plans")
}

model Lead {
  id                 String         @id @default(cuid())
  firstName          String
  lastName           String?
  phone              String?
  findUsBy           String?
  obs                String?
  modalityOfInterest String
  preferencePeriod   String?
  age                Int?
  city               String?
  email              String?
  score              Int
  status             Int            @default(0)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  instagram          String?
  TrialStudent       TrialStudent[]

  @@map("leads")
}

model TrialInvite {
  id           String        @id @default(uuid())
  token        String        @unique
  usedAt       DateTime?
  gridItemId   String
  gridItem     GridItem      @relation(fields: [gridItemId], references: [id])
  validUntil   DateTime
  trialStudent TrialStudent?
  createdAt    DateTime      @default(now())

  @@map("trial_invites")
}

model TrialStudent {
  id         String                @id @default(cuid())
  gridItemId String?
  date       DateTime
  inviteId   String?               @unique
  status     TrialStudentStatus    @default(SCHEDULED)
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @default(now()) @updatedAt
  leadId     String
  gridItem   GridItem?             @relation(fields: [gridItemId], references: [id], onDelete: SetNull)
  invite     TrialInvite?          @relation(fields: [inviteId], references: [id], onDelete: Cascade)
  lead       Lead                  @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@map("trial_students")
}

model Teacher {
  id         String       @id @default(cuid())
  firstName  String
  lastName   String
  birthDate  DateTime
  cpf        String       @unique
  rg         String       @unique
  phone      String?
  email      String?
  instagram  String?
  priceHour  Float
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  password   String?      @default("defaultPassword")
  imageUrl   String?
  pixKey     String?
  classes    Class[]
  WorkedHour WorkedHour[]

  @@map("teachers")
}

model GridItem {
  id            String         @id @default(cuid())
  dayOfWeek     String
  startTime     String
  endTime       String
  classId       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  class         Class?         @relation(fields: [classId], references: [id])
  trialStudents TrialStudent[]
  TrialInvite   TrialInvite[]

  @@map("grid_items")
}

model Class {
  id           String       @id @default(cuid())
  name         String
  description  String?
  modalityId   String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  classLevelId String
  maxStudents  Int
  teacherId    String?
  classLevel   ClassLevel   @relation(fields: [classLevelId], references: [id])
  modality     Modality     @relation(fields: [modalityId], references: [id])
  teacher      Teacher?     @relation(fields: [teacherId], references: [id])
  enrollments  Enrollment[]
  gridClasses  GridItem[]
  WorkedHour   WorkedHour[]

  @@map("classes")
}

model Modality {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes   Class[]

  @@map("modalities")
}

model ClassLevel {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes   Class[]

  @@map("class_levels")
}

model WorkedHour {
  id                     String           @id @default(cuid())
  teacherId              String
  classId                String
  workedAt               DateTime
  startedAt              DateTime
  endedAt                DateTime
  duration               Int
  priceSnapshot          Float
  status                 WorkedHourStatus
  // Snapshots para evitar problemas com mudanças futuras
  teacherNameSnapshot    String           @default("")
  modalityNameSnapshot   String           @default("")
  classLevelSnapshot     String?
  classDescriptionSnapshot String?
  // Contabilização de alunos
  enrolledStudentsCount  Int              @default(0)
  trialStudentsCount     Int              @default(0)
  totalStudentsCount     Int              @default(0)
  // Conversões de matrículas naquele dia
  newEnrollmentsCount    Int              @default(0)
  
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  class                  Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher                Teacher          @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@map("worked_hours")
}


enum PaymentStatus {
  PENDING
  PAID
  CANCELED
}

enum WorkedHourStatus {
  PENDING
  DONE
  CANCELED
}

enum TrialStudentStatus {
  SCHEDULED
  PENDING_STATUS
  CONVERTED
  NOT_CONVERTED
  RESCHEDULED
  CANCELLED
}

model Expense {
  id          String        @id @default(cuid())
  name        String
  description String?
  amount      Float
  dueDay      Int           // Dia do mês que a despesa vence (1-31)
  status      ExpenseStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("expenses")
}

model Settings {
  id                                String   @id @default(cuid())
  trialClassPrice                   Float    @default(40)
  teacherCommissionPerEnrollment    Float    @default(20)
  teacherCommissionPerTrialClass    Float    @default(0)
  createdAt                         DateTime @default(now())
  updatedAt                         DateTime @updatedAt

  @@map("settings")
}

enum ExpenseStatus {
  PENDING
  PAID
  OVERDUE
}
